In order to check AMD implementation of OpenVX, follwing requirements should be fulfilled: -
1- AMD hardware: - CPU/GPU
2- OpenCL 2.0, OpenCV 3.0 installed properly in the system

OPENCL CHECK - See AMD params for every default parameter
---------------------------------------------------------
venomfate@venomfate:~$ sudo clinfo 
Number of platforms                               2
  Platform Name                                   AMD Accelerated Parallel Processing
  Platform Vendor                                 Advanced Micro Devices, Inc.
  Platform Version                                OpenCL 2.0 AMD-APP (3137.0)
  Platform Profile                                FULL_PROFILE
  Platform Extensions                             cl_khr_icd cl_amd_event_callback 
  Platform Extensions function suffix             AMD

  Platform Name                                   NVIDIA CUDA
  Platform Vendor                                 NVIDIA Corporation
  Platform Version                                OpenCL 1.2 CUDA 10.2.131
  Platform Profile                                FULL_PROFILE
  Platform Extensions                             cl_khr_global_int32_base_atomics cl_khr_global_int32_extended_atomics cl_khr_local_int32_base_atomics cl_khr_local_int32_extended_atomics cl_khr_fp64 cl_khr_byte_addressable_store cl_khr_icd cl_khr_gl_sharing cl_nv_compiler_options cl_nv_device_attribute_query cl_nv_pragma_unroll cl_nv_copy_opts cl_nv_create_buffer cl_khr_int64_base_atomics cl_khr_int64_extended_atomics
  Platform Extensions function suffix             NV

  Platform Name                                   AMD Accelerated Parallel Processing
Number of devices                                 1
  Device Name                                     gfx902+xnack
  Device Vendor                                   Advanced Micro Devices, Inc.
  Device Vendor ID                                0x1002
  Device Version                                  OpenCL 2.0 
  Driver Version                                  3137.0 (HSA1.1,LC)
  Device OpenCL C Version                         OpenCL C 2.0 
  Device Type                                     GPU
  Device Board Name (AMD)                         AMD Ryzen 5 3550H with Radeon Vega Mobile Gfx
  Device Topology (AMD)                           PCI-E, 05:00.0
  Device Profile                                  FULL_PROFILE
  Device Available                                Yes
  Compiler Available                              Yes
  Linker Available                                Yes
  Max compute units                               11
  SIMD per compute unit (AMD)                     4
  SIMD width (AMD)                                16
  SIMD instruction width (AMD)                    1
  Max clock frequency                             1200MHz
  Graphics IP (AMD)                               9.2
  Device Partition                                (core)
    Max number of sub-devices                     11
    Supported partition types                     None
  Max work item dimensions                        3
  Max work item sizes                             1024x1024x1024
  Max work group size                             256
  Preferred work group size (AMD)                 256
  Max work group size (AMD)                       1024
  Preferred work group size multiple              64
  Wavefront width (AMD)                           64
  Preferred / native vector sizes                 
    char                                                 4 / 4       
    short                                                2 / 2       
    int                                                  1 / 1       
    long                                                 1 / 1       
    half                                                 1 / 1        (cl_khr_fp16)
    float                                                1 / 1       
    double                                               1 / 1        (cl_khr_fp64)
  Half-precision Floating-point support           (cl_khr_fp16)
    Denormals                                     No
    Infinity and NANs                             No
    Round to nearest                              No
    Round to zero                                 No
    Round to infinity                             No
    IEEE754-2008 fused multiply-add               No
    Support is emulated in software               No
  Single-precision Floating-point support         (core)
    Denormals                                     Yes
    Infinity and NANs                             Yes
    Round to nearest                              Yes
    Round to zero                                 Yes
    Round to infinity                             Yes
    IEEE754-2008 fused multiply-add               Yes
    Support is emulated in software               No
    Correctly-rounded divide and sqrt operations  Yes
  Double-precision Floating-point support         (cl_khr_fp64)
    Denormals                                     Yes
    Infinity and NANs                             Yes
    Round to nearest                              Yes
    Round to zero                                 Yes
    Round to infinity                             Yes
    IEEE754-2008 fused multiply-add               Yes
    Support is emulated in software               No
  Address bits                                    64, Little-Endian
  Global memory size                              3104282624 (2.891GiB)
  Global free memory (AMD)                        3031526 (2.891GiB)
  Global memory channels (AMD)                    2
  Global memory banks per channel (AMD)           4
  Global memory bank width (AMD)                  256 bytes
  Error Correction support                        No
  Max memory allocation                           2638640230 (2.457GiB)
  Unified memory for Host and Device              Yes
  Shared Virtual Memory (SVM) capabilities        (core)
    Coarse-grained buffer sharing                 Yes
    Fine-grained buffer sharing                   Yes
    Fine-grained system sharing                   Yes
    Atomics                                       No
  Minimum alignment for any data type             128 bytes
  Alignment of base address                       1024 bits (128 bytes)
  Preferred alignment for atomics                 
    SVM                                           0 bytes
    Global                                        0 bytes
    Local                                         0 bytes
  Max size for global variable                    2638640230 (2.457GiB)
  Preferred total size of global vars             3104282624 (2.891GiB)
  Global Memory cache type                        Read/Write
  Global Memory cache size                        16384 (16KiB)
  Global Memory cache line size                   64 bytes
  Image support                                   Yes
    Max number of samplers per kernel             5592
    Max size for 1D images from buffer            65536 pixels
    Max 1D or 2D image array size                 2048 images
    Base address alignment for 2D image buffers   256 bytes
    Pitch alignment for 2D image buffers          256 pixels
    Max 2D image size                             16384x16384 pixels
    Max 3D image size                             2048x2048x2048 pixels
    Max number of read image args                 128
    Max number of write image args                8
    Max number of read/write image args           64
  Max number of pipe args                         16
  Max active pipe reservations                    16
  Max pipe packet size                            2638640230 (2.457GiB)
  Local memory type                               Local
  Local memory size                               65536 (64KiB)
  Local memory syze per CU (AMD)                  65536 (64KiB)
  Local memory banks (AMD)                        32
  Max number of constant args                     8
  Max constant buffer size                        2638640230 (2.457GiB)
  Preferred constant buffer size (AMD)            16384 (16KiB)
  Max size of kernel argument                     1024
  Queue properties (on host)                      
    Out-of-order execution                        No
    Profiling                                     Yes
  Queue properties (on device)                    
    Out-of-order execution                        Yes
    Profiling                                     Yes
    Preferred size                                262144 (256KiB)
    Max size                                      8388608 (8MiB)
  Max queues on device                            1
  Max events on device                            1024
  Prefer user sync for interop                    Yes
  Number of P2P devices (AMD)                     0
  P2P devices (AMD)                               <printDeviceInfo:144: get number of CL_DEVICE_P2P_DEVICES_AMD : error -30>
  Profiling timer resolution                      1ns
  Profiling timer offset since Epoch (AMD)        0ns (Thu Jan  1 05:30:00 1970)
  Execution capabilities                          
    Run OpenCL kernels                            Yes
    Run native kernels                            No
    Thread trace supported (AMD)                  No
    Number of async queues (AMD)                  8
    Max real-time compute queues (AMD)            8
    Max real-time compute units (AMD)             11
  printf() buffer size                            4194304 (4MiB)
  Built-in kernels                                
  Device Extensions                               cl_khr_fp64 cl_khr_global_int32_base_atomics cl_khr_global_int32_extended_atomics cl_khr_local_int32_base_atomics cl_khr_local_int32_extended_atomics cl_khr_int64_base_atomics cl_khr_int64_extended_atomics cl_khr_3d_image_writes cl_khr_byte_addressable_store cl_khr_fp16 cl_khr_gl_sharing cl_amd_device_attribute_query cl_amd_media_ops cl_amd_media_ops2 cl_khr_image2d_from_buffer cl_khr_subgroups cl_khr_depth_images cl_amd_copy_buffer_p2p cl_amd_assembly_program 

  Platform Name                                   NVIDIA CUDA
Number of devices                                 1
  Device Name                                     GeForce GTX 1050
  Device Vendor                                   NVIDIA Corporation
  Device Vendor ID                                0x10de
  Device Version                                  OpenCL 1.2 CUDA
  Driver Version                                  440.59
  Device OpenCL C Version                         OpenCL C 1.2 
  Device Type                                     GPU
  Device Topology (NV)                            PCI-E, 01:00.0
  Device Profile                                  FULL_PROFILE
  Device Available                                Yes
  Compiler Available                              Yes
  Linker Available                                Yes
  Max compute units                               6
  Max clock frequency                             1442MHz
  Compute Capability (NV)                         6.1
  Device Partition                                (core)
    Max number of sub-devices                     1
    Supported partition types                     None
  Max work item dimensions                        3
  Max work item sizes                             1024x1024x64
  Max work group size                             1024
  Preferred work group size multiple              32
  Warp size (NV)                                  32
  Preferred / native vector sizes                 
    char                                                 1 / 1       
    short                                                1 / 1       
    int                                                  1 / 1       
    long                                                 1 / 1       
    half                                                 0 / 0        (n/a)
    float                                                1 / 1       
    double                                               1 / 1        (cl_khr_fp64)
  Half-precision Floating-point support           (n/a)
  Single-precision Floating-point support         (core)
    Denormals                                     Yes
    Infinity and NANs                             Yes
    Round to nearest                              Yes
    Round to zero                                 Yes
    Round to infinity                             Yes
    IEEE754-2008 fused multiply-add               Yes
    Support is emulated in software               No
    Correctly-rounded divide and sqrt operations  Yes
  Double-precision Floating-point support         (cl_khr_fp64)
    Denormals                                     Yes
    Infinity and NANs                             Yes
    Round to nearest                              Yes
    Round to zero                                 Yes
    Round to infinity                             Yes
    IEEE754-2008 fused multiply-add               Yes
    Support is emulated in software               No
  Address bits                                    64, Little-Endian
  Global memory size                              3166699520 (2.949GiB)
  Error Correction support                        No
  Max memory allocation                           791674880 (755MiB)
  Unified memory for Host and Device              No
  Integrated memory (NV)                          No
  Minimum alignment for any data type             128 bytes
  Alignment of base address                       4096 bits (512 bytes)
  Global Memory cache type                        Read/Write
  Global Memory cache size                        294912 (288KiB)
  Global Memory cache line size                   128 bytes
  Image support                                   Yes
    Max number of samplers per kernel             32
    Max size for 1D images from buffer            268435456 pixels
    Max 1D or 2D image array size                 2048 images
    Max 2D image size                             16384x32768 pixels
    Max 3D image size                             16384x16384x16384 pixels
    Max number of read image args                 256
    Max number of write image args                16
  Local memory type                               Local
  Local memory size                               49152 (48KiB)
  Registers per block (NV)                        65536
  Max number of constant args                     9
  Max constant buffer size                        65536 (64KiB)
  Max size of kernel argument                     4352 (4.25KiB)
  Queue properties                                
    Out-of-order execution                        Yes
    Profiling                                     Yes
  Prefer user sync for interop                    No
  Profiling timer resolution                      1000ns
  Execution capabilities                          
    Run OpenCL kernels                            Yes
    Run native kernels                            No
    Kernel execution timeout (NV)                 No
  Concurrent copy and kernel execution (NV)       Yes
    Number of async copy engines                  2
  printf() buffer size                            1048576 (1024KiB)
  Built-in kernels                                
  Device Extensions                               cl_khr_global_int32_base_atomics cl_khr_global_int32_extended_atomics cl_khr_local_int32_base_atomics cl_khr_local_int32_extended_atomics cl_khr_fp64 cl_khr_byte_addressable_store cl_khr_icd cl_khr_gl_sharing cl_nv_compiler_options cl_nv_device_attribute_query cl_nv_pragma_unroll cl_nv_copy_opts cl_nv_create_buffer cl_khr_int64_base_atomics cl_khr_int64_extended_atomics

NULL platform behavior
  clGetPlatformInfo(NULL, CL_PLATFORM_NAME, ...)  No platform
  clGetDeviceIDs(NULL, CL_DEVICE_TYPE_ALL, ...)   No platform
  clCreateContext(NULL, ...) [default]            No platform
  clCreateContext(NULL, ...) [other]              Success [AMD]
  clCreateContextFromType(NULL, CL_DEVICE_TYPE_DEFAULT)  Success (1)
    Platform Name                                 AMD Accelerated Parallel Processing
    Device Name                                   gfx902+xnack
  clCreateContextFromType(NULL, CL_DEVICE_TYPE_CPU)  No devices found in platform
  clCreateContextFromType(NULL, CL_DEVICE_TYPE_GPU)  Success (1)
    Platform Name                                 AMD Accelerated Parallel Processing
    Device Name                                   gfx902+xnack
  clCreateContextFromType(NULL, CL_DEVICE_TYPE_ACCELERATOR)  No devices found in platform
  clCreateContextFromType(NULL, CL_DEVICE_TYPE_CUSTOM)  No devices found in platform
  clCreateContextFromType(NULL, CL_DEVICE_TYPE_ALL)  Success (1)
    Platform Name                                 AMD Accelerated Parallel Processing
    Device Name                                   gfx902+xnack


SET PROPER OPENCV PATH IN ALL CMakeList.txt(source directory as well as runvx directory)
----------------------------------------------------------------------------------------
In my system I have installed OpenCV 3 in home directory. 

1. Source Directory
cmake_minimum_required (VERSION 2.8)
project(amdovx-core)

list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
set("OpenCV_DIR" "/home/venomfate/opencv/build")

message("CMAKE_MODULE_PATH: "${CMAKE_MODULE_PATH})
#message("PROJECT_SOURCE_DIR: "${PROJECT_SOURCE_DIR})
find_package(OpenCL)
find_package(OpenCV PATHS /home/venomfate/opencv/cmake)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_INSTALL_PREFIX /opt/rocm)

file(COPY examples DESTINATION ${CMAKE_BINARY_DIR})

add_subdirectory(openvx)
add_subdirectory(runvx)

if(OpenCL_FOUND)
    add_subdirectory(runcl)
endif(OpenCL_FOUND)
~                                                                                                                                                                                                                  
~                                                                                                                                                                                                                  
~                                                                                                                                                                                                                  
~                                                                                                                                                                                                                  
~                                                                                                                                                                                                                  
~                                                                                                                                                                                                                  
"CMakeLists.txt" 44L, 1871C       


2. runVx directory
cmake_minimum_required (VERSION 2.8)
project (runvx)

set (CMAKE_CXX_STANDARD 11)
set("OpenCV_DIR" "/home/venomfate/opencv/build")

#set(${OpenCV_DIR} /home/venomfate/opencv/build)
find_package(OpenCL)
find_package(OpenCV PATHS /home/venomfate/opencv/cmake)

include_directories(../openvx/include)

list(APPEND SOURCES
        runvx.cpp
        vxArray.cpp
        vxConvolution.cpp
        vxDistribution.cpp
        vxEngine.cpp
        vxEngineUtil.cpp
        vxImage.cpp
        vxLUT.cpp
        vxMatrix.cpp
        vxParameter.cpp
        vxParamHelper.cpp
        vxPyramid.cpp
        vxRemap.cpp
        vxScalar.cpp
        vxThreshold.cpp
        vxTensor.cpp
        vxUtils.cpp
"runvx/CMakeLists.txt" 93L, 3135C                                                                                                                                                                25,1          Top

INITIALIZE CMAKE IN SOURCE DIRECTORY
------------------------------------
Check for paths for opencv and opencl

venomfate@venomfate:~/workspace/office/verisilicon/amd_imp/amdovx-core$ make clean
venomfate@venomfate:~/workspace/office/verisilicon/amd_imp/amdovx-core$ rm CMakeCache.txt 
venomfate@venomfate:~/workspace/office/verisilicon/amd_imp/amdovx-core$ cmake . -LH
CMake Warning (dev) at CMakeLists.txt:27:
  Syntax Warning in cmake code at column 30

  Argument not separated from preceding token by whitespace.
This warning is for project developers.  Use -Wno-dev to suppress it.

-- The C compiler identification is GNU 7.5.0
-- The CXX compiler identification is GNU 7.5.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
CMAKE_MODULE_PATH: /home/venomfate/workspace/office/verisilicon/amd_imp/amdovx-core/cmake
-- Found OPENCL: /usr/lib/x86_64-linux-gnu/libOpenCL.so  
-- Found OpenCV: /home/venomfate/opencv/build (found version "3.4.11") 
OpenCL_FOUND
ENABLE_OPENCV check
ENABLE_OPENCV=1
-- Configuring done
-- Generating done
-- Build files have been written to: /home/venomfate/workspace/office/verisilicon/amd_imp/amdovx-core
-- Cache values
// Choose the type of build, options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel.
CMAKE_BUILD_TYPE:STRING=

// Install path prefix, prepended onto install directories.
CMAKE_INSTALL_PREFIX:PATH=/usr/local

// Path to a file.
SSL_INCLUDE:PATH=SSL_INCLUDE-NOTFOUND

RUN MAKE IN SOURCE DIRECTORY
----------------------------

venomfate@venomfate:~/workspace/office/verisilicon/amd_imp/amdovx-core$ make
[  1%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_drama.cpp.o
[  3%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_drama_alloc.cpp.o
[  5%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_drama_analyze.cpp.o
[  7%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_drama_divide.cpp.o
[  9%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_drama_merge.cpp.o
[ 11%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_drama_remove.cpp.o
[ 12%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_haf_cpu.cpp.o
[ 14%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_haf_cpu_arithmetic.cpp.o
[ 16%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_haf_cpu_canny.cpp.o
[ 18%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_haf_cpu_ch_extract_combine.cpp.o
[ 20%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_haf_cpu_color_convert.cpp.o
[ 22%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_haf_cpu_fast_corners.cpp.o
[ 24%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_haf_cpu_filter.cpp.o
[ 25%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_haf_cpu_geometric.cpp.o
[ 27%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_haf_cpu_harris.cpp.o
[ 29%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_haf_cpu_histogram.cpp.o
[ 31%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_haf_cpu_logical.cpp.o
[ 33%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_haf_cpu_opticalflow.cpp.o
[ 35%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_haf_cpu_pyramid.cpp.o
[ 37%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_haf_gpu_common.cpp.o
[ 38%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_haf_gpu_conversion.cpp.o
[ 40%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_haf_gpu_corners.cpp.o
[ 42%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_haf_gpu_linear_filter.cpp.o
[ 44%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_haf_gpu_special_filters.cpp.o
[ 46%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_interface.cpp.o
[ 48%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_kernel_api.cpp.o
/home/venomfate/workspace/office/verisilicon/amd_imp/amdovx-core/openvx/ago/ago_kernel_api.cpp: In function ‘int agoKernel_AbsDiff_S16_S16S16_Sat(_vx_node*, AgoKernelCommand)’:
/home/venomfate/workspace/office/verisilicon/amd_imp/amdovx-core/openvx/ago/ago_kernel_api.cpp:8040:5: warning: ‘%s’ directive writing up to 255 bytes into a region of size 120 [-Wformat-overflow=]
 int agoKernel_AbsDiff_S16_S16S16_Sat(AgoNode * node, AgoKernelCommand cmd)
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/venomfate/workspace/office/verisilicon/amd_imp/amdovx-core/openvx/ago/ago_kernel_api.cpp:8040:5: note: using the range [-2147483648, 2147483647] for directive argument
/home/venomfate/workspace/office/verisilicon/amd_imp/amdovx-core/openvx/ago/ago_kernel_api.cpp:8069:11: note: ‘sprintf’ output between 58 and 323 bytes into a destination of size 128
    sprintf(item, "#define %s(p0,p1) AbsDiff_S16_S16S16_Sat(p0,p1,(S16x8)(%d))\n", node->opencl_name, (int)iImg1->u.img.uniform[0]);
    ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/venomfate/workspace/office/verisilicon/amd_imp/amdovx-core/openvx/ago/ago_kernel_api.cpp:8040:5: warning: ‘%s’ directive writing up to 255 bytes into a region of size 120 [-Wformat-overflow=]
 int agoKernel_AbsDiff_S16_S16S16_Sat(AgoNode * node, AgoKernelCommand cmd)
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/venomfate/workspace/office/verisilicon/amd_imp/amdovx-core/openvx/ago/ago_kernel_api.cpp:8040:5: note: using the range [-2147483648, 2147483647] for directive argument
/home/venomfate/workspace/office/verisilicon/amd_imp/amdovx-core/openvx/ago/ago_kernel_api.cpp:8075:11: note: ‘sprintf’ output between 58 and 323 bytes into a destination of size 128
    sprintf(item, "#define %s(p0,p2) AbsDiff_S16_S16S16_Sat(p0,p2,(S16x8)(%d))\n", node->opencl_name, (int)iImg0->u.img.uniform[0]);
    ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/venomfate/workspace/office/verisilicon/amd_imp/amdovx-core/openvx/ago/ago_kernel_api.cpp:8040:5: warning: ‘%s’ directive writing up to 255 bytes into a region of size 120 [-Wformat-overflow=]
 int agoKernel_AbsDiff_S16_S16S16_Sat(AgoNode * node, AgoKernelCommand cmd)
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/venomfate/workspace/office/verisilicon/amd_imp/amdovx-core/openvx/ago/ago_kernel_api.cpp:8079:11: note: ‘sprintf’ output between 53 and 308 bytes into a destination of size 128
    sprintf(item, "#define %s(p0,p1,p2) AbsDiff_S16_S16S16_Sat(p0,p1,p2)\n", node->opencl_name);
    ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/venomfate/workspace/office/verisilicon/amd_imp/amdovx-core/openvx/ago/ago_kernel_api.cpp: In function ‘int agoKernel_Magnitude_S16_S16S16(_vx_node*, AgoKernelCommand)’:
/home/venomfate/workspace/office/verisilicon/amd_imp/amdovx-core/openvx/ago/ago_kernel_api.cpp:8605:5: warning: ‘ (S16x8 * p0, S16x8 p1, S16x8 p2)
{
  S16x8 r;
  float2 f;
  f.s0 = (float)((((int)(p1.s0)) << 16) >> 16); f.s1 = (float)((((int)(p2.s0)) << 16) >> 16); f.s0 *= f.s0; f.s0 = mad(f.s1, f.s1, f.s0); f.s0 = native_sqrt(f.s0); f.s0 = min(f.s0 + 0.5f, 32767.0f); r.s0  = (uint)(f.s0);
  f.s0 = (float)(( (int)(p1.s0))        >> 16); f.s1 = (float)(( (int)(p2.s0))        >> 16); f.s0 *= f.s0; f.s0 = mad(f.s1, f.s1, f.s0); f.s0 = native_sqrt(f.s0); f.s0 = min(f.s0 + 0.5f, 32767.0f); r.s0 |= (uint)(f.s0) << 16;
  f.s0 = (float)((((int)(p1.s1)) << 16) >> 16); f.s1 = (float)((((int)(p2.s1)) << 16) >> 16); f.s0 *= f.s0; f.s0 = mad(f.s1, f.s1, f.s0); f.s0 = native_sqrt(f.s0); f.s0 = min(f.s0 + 0.5f, 32767.0f); r.s1  = (uint)(f.s0);
  f.s0 = (float)(( (int)(p1.s1))        >> 16); f.s1 = (float)(( (int)(p2.s1))        >> 16); f.s0 *= f.s0; f.s0 = mad(f.s1, f.s1, f.s0); f.s0 = native_sqrt(f.s0); f.s0 = min(f.s0 + 0.5f, 32767.0f); r.s1 |= (uint)(f.s0) << 16;
  f.s0 = (float)((((int)(p1.s2)) << 16) >> 16); f.s1 = (float)((((int)(p2.s2)) << 16) >> 16); f.s0 *= f.s0; f.s0 = mad(f.s1, f.s1, f.s0); f.s0 = native_sqrt(f.s0); f.s0 = min(f.s0 + 0.5f, 32767.0f); r.s2  = (uint)(f.s0);
  f.s0 = (float)(( (int)(p1.s2))        >> 16); f.s1 = (float)(( (int)(p2.s2))        >> 16); f.s0 *= f.s0; f.s0 = mad(f.s1, f.s1, f.s0); f.s0 = native_sqrt(f.s0); f.s0 = min(f.s0 + 0.5f, 32767.0f); r.s2 |= (uint)(f.s0) << 16;
  f.s0 = (float)((((int)(p1.s3)) << 16) >> 16); f.s1 = (float)((((int)(p2.s3)) << 16) >> 16); f.s0 *= f.s0; f.s0 = mad(f.s1, f.s1, f.s0); f.s0 = native_sqrt(f.s0); f.s0 = min(f.s0 + 0.5f, 32767.0f); r.s3  = (uint)(f.s0);
  f.s0 = (float)(( (int)(p1.s3))        >> 16); f.s1 = (float)(( (int)(p2.s3))        >> 16); f.s0 *= f.s0; f.s0 = mad(f.s1, f.s1, f.s0); f.s0 = native_sqrt(f.s0); f.s0 = min(f.s0 + 0.5f, 32767.0f); r.s3 |= (uint)(f.s0) << 16;
  *p0 = r;
}
   ’ directive writing 1864 bytes into a region of size between 1788 and 2043 [-Wformat-overflow=]
 int agoKernel_Magnitude_S16_S16S16(AgoNode * node, AgoKernelCommand cmd)
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/venomfate/workspace/office/verisilicon/amd_imp/amdovx-core/openvx/ago/ago_kernel_api.cpp:8628:10: note: ‘sprintf’ output between 1870 and 2125 bytes into a destination of size 2048
   sprintf(textBuffer, OPENCL_FORMAT(
   ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
    "void %s (S16x8 * p0, S16x8 p1, S16x8 p2)\n"
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    "{\n"
    ~~~~~  
    "  S16x8 r;\n"
    ~~~~~~~~~~~~~~
    "  float2 f;\n"
    ~~~~~~~~~~~~~~~
    "  f.s0 = (float)((((int)(p1.s0)) << 16) >> 16); f.s1 = (float)((((int)(p2.s0)) << 16) >> 16); f.s0 *= f.s0; f.s0 = mad(f.s1, f.s1, f.s0); f.s0 = native_sqrt(f.s0); f.s0 = min(f.s0 + 0.5f, 32767.0f); r.s0  = (uint)(f.s0);\n"
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    "  f.s0 = (float)(( (int)(p1.s0))        >> 16); f.s1 = (float)(( (int)(p2.s0))        >> 16); f.s0 *= f.s0; f.s0 = mad(f.s1, f.s1, f.s0); f.s0 = native_sqrt(f.s0); f.s0 = min(f.s0 + 0.5f, 32767.0f); r.s0 |= (uint)(f.s0) << 16;\n"
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    "  f.s0 = (float)((((int)(p1.s1)) << 16) >> 16); f.s1 = (float)((((int)(p2.s1)) << 16) >> 16); f.s0 *= f.s0; f.s0 = mad(f.s1, f.s1, f.s0); f.s0 = native_sqrt(f.s0); f.s0 = min(f.s0 + 0.5f, 32767.0f); r.s1  = (uint)(f.s0);\n"
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    "  f.s0 = (float)(( (int)(p1.s1))        >> 16); f.s1 = (float)(( (int)(p2.s1))        >> 16); f.s0 *= f.s0; f.s0 = mad(f.s1, f.s1, f.s0); f.s0 = native_sqrt(f.s0); f.s0 = min(f.s0 + 0.5f, 32767.0f); r.s1 |= (uint)(f.s0) << 16;\n"
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    "  f.s0 = (float)((((int)(p1.s2)) << 16) >> 16); f.s1 = (float)((((int)(p2.s2)) << 16) >> 16); f.s0 *= f.s0; f.s0 = mad(f.s1, f.s1, f.s0); f.s0 = native_sqrt(f.s0); f.s0 = min(f.s0 + 0.5f, 32767.0f); r.s2  = (uint)(f.s0);\n"
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    "  f.s0 = (float)(( (int)(p1.s2))        >> 16); f.s1 = (float)(( (int)(p2.s2))        >> 16); f.s0 *= f.s0; f.s0 = mad(f.s1, f.s1, f.s0); f.s0 = native_sqrt(f.s0); f.s0 = min(f.s0 + 0.5f, 32767.0f); r.s2 |= (uint)(f.s0) << 16;\n"
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    "  f.s0 = (float)((((int)(p1.s3)) << 16) >> 16); f.s1 = (float)((((int)(p2.s3)) << 16) >> 16); f.s0 *= f.s0; f.s0 = mad(f.s1, f.s1, f.s0); f.s0 = native_sqrt(f.s0); f.s0 = min(f.s0 + 0.5f, 32767.0f); r.s3  = (uint)(f.s0);\n"
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    "  f.s0 = (float)(( (int)(p1.s3))        >> 16); f.s1 = (float)(( (int)(p2.s3))        >> 16); f.s0 *= f.s0; f.s0 = mad(f.s1, f.s1, f.s0); f.s0 = native_sqrt(f.s0); f.s0 = min(f.s0 + 0.5f, 32767.0f); r.s3 |= (uint)(f.s0) << 16;\n"
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    "  *p0 = r;\n"
    ~~~~~~~~~~~~~~
    "}\n"
    ~~~~~  
    ), node->opencl_name);
    ~~~~~~~~~~~~~~~~~~~~~
[ 50%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_kernel_list.cpp.o
[ 51%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_platform.cpp.o
[ 53%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_util.cpp.o
[ 55%] Building CXX object openvx/CMakeFiles/openvx.dir/ago/ago_util_opencl.cpp.o
/home/venomfate/workspace/office/verisilicon/amd_imp/amdovx-core/openvx/ago/ago_util_opencl.cpp: In function ‘int agoGpuOclSuperNodeFinalize(_vx_graph*, AgoSuperNode*)’:
/home/venomfate/workspace/office/verisilicon/amd_imp/amdovx-core/openvx/ago/ago_util_opencl.cpp:1566:5: warning: ‘%s’ directive writing up to 255 bytes into a region of size 251 [-Wformat-overflow=]
 int agoGpuOclSuperNodeFinalize(AgoGraph * graph, AgoSuperNode * supernode)
     ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/venomfate/workspace/office/verisilicon/amd_imp/amdovx-core/openvx/ago/ago_util_opencl.cpp:1753:11: note: ‘sprintf’ output between 7 and 262 bytes into a destination of size 256
    sprintf(item, "void %s(", node->opencl_name); code2 = item;
    ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/venomfate/workspace/office/verisilicon/amd_imp/amdovx-core/openvx/ago/ago_util_opencl.cpp:1566:5: warning: ‘%s’ directive writing up to 255 bytes into a region of size 254 [-Wformat-overflow=]
 int agoGpuOclSuperNodeFinalize(AgoGraph * graph, AgoSuperNode * supernode)
     ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/venomfate/workspace/office/verisilicon/amd_imp/amdovx-core/openvx/ago/ago_util_opencl.cpp:1939:10: note: ‘sprintf’ output between 4 and 259 bytes into a destination of size 256
   sprintf(item, "\t\t%s(", node->opencl_name); code += item;
   ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[ 57%] Building CXX object openvx/CMakeFiles/openvx.dir/api/vxu.cpp.o
[ 59%] Building CXX object openvx/CMakeFiles/openvx.dir/api/vx_api.cpp.o
[ 61%] Building CXX object openvx/CMakeFiles/openvx.dir/api/vx_nodes.cpp.o
[ 62%] Linking CXX shared library ../lib/libopenvx.so
[ 62%] Built target openvx
[ 64%] Building CXX object runvx/CMakeFiles/runvx.dir/runvx.cpp.o
[ 66%] Building CXX object runvx/CMakeFiles/runvx.dir/vxArray.cpp.o
[ 68%] Building CXX object runvx/CMakeFiles/runvx.dir/vxConvolution.cpp.o
[ 70%] Building CXX object runvx/CMakeFiles/runvx.dir/vxDistribution.cpp.o
[ 72%] Building CXX object runvx/CMakeFiles/runvx.dir/vxEngine.cpp.o
[ 74%] Building CXX object runvx/CMakeFiles/runvx.dir/vxEngineUtil.cpp.o
[ 75%] Building CXX object runvx/CMakeFiles/runvx.dir/vxImage.cpp.o
[ 77%] Building CXX object runvx/CMakeFiles/runvx.dir/vxLUT.cpp.o
[ 79%] Building CXX object runvx/CMakeFiles/runvx.dir/vxMatrix.cpp.o
[ 81%] Building CXX object runvx/CMakeFiles/runvx.dir/vxParameter.cpp.o
[ 83%] Building CXX object runvx/CMakeFiles/runvx.dir/vxParamHelper.cpp.o
[ 85%] Building CXX object runvx/CMakeFiles/runvx.dir/vxPyramid.cpp.o
[ 87%] Building CXX object runvx/CMakeFiles/runvx.dir/vxRemap.cpp.o
[ 88%] Building CXX object runvx/CMakeFiles/runvx.dir/vxScalar.cpp.o
[ 90%] Building CXX object runvx/CMakeFiles/runvx.dir/vxThreshold.cpp.o
[ 92%] Building CXX object runvx/CMakeFiles/runvx.dir/vxTensor.cpp.o
[ 94%] Building CXX object runvx/CMakeFiles/runvx.dir/vxUtils.cpp.o
[ 96%] Linking CXX executable ../bin/runvx
[ 96%] Built target runvx
[ 98%] Building CXX object runcl/CMakeFiles/runcl.dir/runcl.cpp.o
[100%] Linking CXX executable ../bin/runcl
[100%] Built target runcl

CHECK THE RUNVX GRAPH FILES- Outputs are attached as Images
-----------------------------------------------------------
Terminal output is shown below, runvx with sudo command

venomfate@venomfate:~/workspace/office/verisilicon/amd_imp/amdovx-core$ sudo ./bin/runvx examples/gdf/canny.gdf 
[sudo] password for venomfate: 
runvx 0.9.9
OK: using AMD OpenVX 0.9.9
QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-root'
OK: OpenVX using GPU device#0 (gfx902+xnack) [OpenCL 2.0 ] [SvmCaps 0 0]
csv,HEADER ,STATUS, COUNT,cur-ms,avg-ms,min-ms,clenqueue-ms,clwait-ms,clwrite-ms,clread-ms
OK: capturing 480x360 image(s) into 480x360 RGB image buffer
csv,OVERALL,  PASS,     1,      ,132.07,132.07,  0.12,124.92,  4.15,  0.61 (median 132.075)
> total elapsed time:   0.64 sec
Abort: Press any key to exit...
OK: OpenCL buffer usage: 1754704, 4/4
venomfate@venomfate:~/workspace/office/verisilicon/amd_imp/amdovx-core$ sudo ./bin/runvx examples/gdf/
canny.gdf           skintonedetect.gdf  
venomfate@venomfate:~/workspace/office/verisilicon/amd_imp/amdovx-core$ sudo ./bin/runvx examples/gdf/skintonedetect.gdf 
runvx 0.9.9
OK: using AMD OpenVX 0.9.9
QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-root'
OK: OpenVX using GPU device#0 (gfx902+xnack) [OpenCL 2.0 ] [SvmCaps 0 0]
csv,HEADER ,STATUS, COUNT,cur-ms,avg-ms,min-ms,clenqueue-ms,clwait-ms,clwrite-ms,clread-ms
OK: capturing 480x360 image(s) into 480x360 RGB image buffer
csv,OVERALL,  PASS,     1,      , 27.51, 27.51,  0.09, 23.17,  4.02,  0.00 (median 27.507)
> total elapsed time:   0.12 sec
Abort: Press any key to exit...


^C
          
